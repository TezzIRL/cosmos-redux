#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define MAC     1
#define LOWER   2
#define RAISE   3
#define ADJUST  4

#define HYPER(key) LS(LC(LA(LG(key))))
#define MEH(key)   LS(LC(LA(key)))

&sl { release-after-ms = <5000>; };

&kscan0 {
    debounce-press-ms = <30>;
    debounce-release-ms = <30>;
};

/ {
    behaviors {
        td_shift: td_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        td_l2: td_l2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L2";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&tog 2>;
        };

        lh_pht: lh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "left_positional_hold_tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 58 59>;
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hand_positional_hold_tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 53 54 55 56 57 60 61>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp GRAVE     &kp N1                  &kp N2              &kp N3              &kp N4                &kp N5                                                                 &kp N6  &kp N7            &kp N8               &kp N9               &kp N0                   &kp MINUS
&kp TAB       &kp Q                   &kp W               &kp E               &kp R                 &kp T                                                                  &kp Y   &kp U             &kp I                &kp O                &kp P                    &kp EQUAL
&kp CAPSLOCK  &lh_pht LEFT_CONTROL A  &lh_pht LEFT_GUI S  &lh_pht LEFT_ALT D  &lh_pht LEFT_SHIFT F  &kp G                                                                  &kp H   &rh_pht RSHIFT J  &rh_pht RIGHT_ALT K  &rh_pht RIGHT_GUI L  &rh_pht RCTRL SEMICOLON  &kp SQT
&td_shift     &kp Z                   &kp X               &kp C               &kp V                 &kp B                                                                  &kp N   &kp M             &kp COMMA            &kp DOT              &kp FSLH                 &td_shift
                                      &kp UP_ARROW        &kp DOWN_ARROW                            &kp ESCAPE  &kp SPACE    &kp ENTER        &kp ENTER   &kp SPACE        &td_l2                    &kp LEFT_ARROW       &kp RIGHT_ARROW
                                                                                                                &lt 3 PG_UP  &kp BACKSPACE    &kp DELETE  &lt 1 PAGE_DOWN
            >;
        };

        function {
            bindings = <
&kp ESC          &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp C_MUTE  &kp C_VOL_UP                                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4  &none
&kp PRINTSCREEN  &kp F9      &kp F10   &kp F11     &kp F12     &kp C_VOL_DN                                    &none         &none         &none         &none           &none         &none
&kp SCROLLLOCK   &kp F5      &kp F6    &kp F7      &kp F8      &none                                           &none         &kp RSHFT     &kp RALT      &kp RGUI        &kp RCTRL     &none
&kp PAUSE_BREAK  &kp F1      &kp F2    &kp F3      &kp F4      &none                                           &none         &none         &none         &none           &none         &none
                             &trans    &trans                  &trans        &trans  &trans    &trans  &trans  &trans                      &bt BT_CLR    &bt BT_CLR_ALL
                                                                             &trans  &trans    &trans  &trans
            >;
        };

        symb-num {
            bindings = <
&kp TILDE  &kp LBKT        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RBKT          &kp QUESTION                                                 &kp KP_NUMLOCK    &kp KP_NUMBER_7  &kp KP_N8        &kp KP_N9         &kp KP_DIVIDE    &kp PERCENT
&kp SLASH  &kp LEFT_BRACE  &kp GRAVE             &kp SQT                &kp RIGHT_BRACE   &kp AT_SIGN                                                  &kp LESS_THAN     &kp KP_N4        &kp KP_N5        &kp KP_N6         &kp KP_MULTIPLY  &kp CARET
&kp POUND  &kp CARET       &kp DQT               &kp UNDER              &kp DOLLAR        &kp PERCENT                                                  &kp GREATER_THAN  &kp KP_N1        &kp KP_NUMBER_2  &kp KP_N3         &kp KP_MINUS     &kp LEFT_PARENTHESIS
&kp EXCL   &kp LESS_THAN   &kp MINUS             &kp EQUAL              &kp GREATER_THAN  &kp PLUS                                                     &kp EQUAL         &kp KP_N0        &kp KP_DOT       &kp LS(KP_ENTER)  &kp KP_PLUS      &kp RIGHT_PARENTHESIS
                           &kp AMPERSAND         &kp PIPE                                 &kp BSLH      &kp COLON     &kp SEMICOLON    &trans  &trans  &tog 2                             &trans           &trans
                                                                                                        &kp ASTERISK  &kp PERIOD       &trans  &trans
            >;
        };

        short_nav {
            bindings = <
&kp LG(LS(S))  &kp LG(LC(V))  &none      &none      &kp LC(LS(ESCAPE))  &kp LA(F4)                                                      &kp INSERT   &kp LC(HOME)  &kp HOME   &kp PG_UP      &kp LC(PG_UP)  &none
&none          &none          &kp LC(V)  &kp LC(X)  &kp LC(C)           &none                                                           &kp LG(TAB)  &kp LC(END)   &kp END    &kp PG_DN      &kp LC(PG_DN)  &kp LG(LC(D))
&caps_word     &kp LCTRL      &kp LGUI   &kp LALT   &kp LSHIFT          &none                                                           &kp LA(TAB)  &kp LC(LEFT)  &kp UP     &kp LC(RIGHT)  &kp LG(PG_UP)  &kp LG(LC(LEFT))
&none          &none          &none      &none      &kp LC(F)           &none                                                           &kp TAB      &kp LEFT      &kp DOWN   &kp RIGHT      &kp LG(PG_DN)  &kp LG(LC(RIGHT))
                              &trans     &trans                         &trans      &trans  &trans    &kp LC(DEL)        &kp DEL        &trans                     &kp LC(Z)  &kp LC(Y)
                                                                                    &trans  &trans    &kp LC(BACKSPACE)  &kp BACKSPACE
            >;
        };
    };
};
